# === Economy Mode: minimize tokens ===
- Never include large, unrelated files in context.
- Do not auto-include node_modules, build outputs, lockfiles, images, PDFs, or large JSON.
- Prefer small, surgical patches over full-file rewrites.
- Return only the minimal diff/patch. No explanations, no lists of changes.
- Do not repeat user instructions or file contents unless explicitly asked.

# File filtering
ignore:
  - node_modules/**
  - .git/**
  - dist/** .next/** build/** coverage/**
  - **/*.lock
  - **/*.map
  - **/*.png **/*.jpg **/*.svg **/*.pdf
  - **/*.csv **/*.xlsx
  - **/fixtures/** **/snapshots/**

# Context discipline
context:
  maxFiles: 3          # не более 3 файлов в запросе
  maxBytesPerFile: 40k # жесткий лимит на размер
  strategy: "manual"   # только ручной выбор файлов

# Output policy
output:
  mode: "patch"        # всегда патч
  explain: false
  comments: false

# Style for edits
edits:
  keep_formatting: true
  minimal_changes: true

# Tests
tests:
  scope: "touched"     # только для измененного кода

## Project Description
Корпоративный AI-портал для сотрудников с контролем доступа, лимитами и статистикой.
- **Цель**: Предоставить сотрудникам доступ к AI моделям с контролем использования и стоимости
- **Ключевые функции**: 
  - Гибкая система лимитов (дневные/месячные по запросам/токенам)
  - Групповое управление доступом к моделям
  - Полная статистика и аналитика использования
  - Управление через корпоративные API ключи
  - Детальная визуализация данных

## Architecture
- **Frontend**: React 18.3, TypeScript 5.8+ (strict mode), Vite 7.0
- **UI Library**: Ant Design 5.20+ + Recharts 2.12+ для графиков
- **Backend**: Node.js + Express прокси с middleware
- **Database**: Supabase с полной TypeScript типизацией
- **Security**: Supabase Auth + JWT (без RLS - безопасность через прокси)
- **AI Providers**: OpenAI, Gemini, DeepSeek через корпоративные API ключи
- **Deployment**: Docker Compose для всех сервисов

## Code Style
- Строгий TypeScript для всех компонентов
- Functional React components с хуками
- Async/await для асинхронных операций
- ESLint + Prettier для качества кода
- **Максимальный размер файла: 600 строк** - разделять большие файлы. С целью уменьшения кода страниц и сохранения размера, необходимо разбивать страницы на отдельные компоненты по функциональным и смысловым блокам.

## Key Principles
- Единый стек TypeScript
- Type-safe операции с Supabase
- **VITE_SUPABASE_service_role_key ТОЛЬКО на сервере**, никогда в клиенте
- **VITE_SUPABASE_ANON_KEY для клиентских операций**
- Безопасность через прокси, НЕ через Row Level Security (RLS)
- Все сообщения в чате (вопросы и ответы) на русском языке
- **Environment Variables**: ТОЛЬКО `.env.local` файлы
- **Стиль общения**: Писать только по делу, без лишних слов.

## Security Features (Implemented)

### Authentication & Authorization
- **JWT Verification**: Все запросы к `/api/v1/*` требуют Bearer JWT токен
- **Role-Based Access Control**: Middleware `requireAdmin` для защиты админ-операций
- **User Authentication**: Middleware `createAuthMiddleware` проверяет JWT через Supabase
- **Request Authentication**: Заголовок `Authorization: Bearer <token>` обязателен

### Rate Limiting & DoS Protection
- **IP-Based Rate Limiting**: `express-rate-limit` middleware:
  - General API: 100 requests per 15 minutes per IP
  - Chat endpoint: 20 requests per minute per IP
- **Cost-Based Rate Limiting**: `CostLimiterService` отслеживает расходы:
  - Часовой лимит по стоимости ($50/час по умолчанию)
  - Проверка перед отправкой запроса к AI провайдеру
  - Блокировка при превышении лимита

### Input Validation
- **Request Body Validation**: Zod schemas для всех эндпоинтов:
  - `chatRequestSchema` для chat запросов
  - `userUpdateSchema` для обновления пользователей
  - `modelAddSchema` для добавления моделей
  - `settingsSchema` для глобальных настроек
- **Strict Type Checking**: Все валидации возвращают 400 Bad Request при ошибке

### AI Provider Response Validation
- **Zod Response Schemas**:
  - `openAIResponseSchema` для OpenAI/совместимых API
  - `geminiResponseSchema` для Google Gemini
- **Graceful Degradation**: Неизвестные поля в ответе игнорируются

### Streaming Protection
- **Stream Timeout**: 300 секунд для долгоживущих SSE соединений
- **Error Handling in Streams**: Try-catch в обработчиках `on('data')`, `on('end')`, `on('error')`
- **Connection Monitoring**: Reset timeout при каждом пакете данных

### Server-Side Security
- **No Client-Side Secrets**: `SUPABASE_SERVICE_ROLE_KEY` ТОЛЬКО на сервере (proxy/.env)
- **Secure Environment Variables**: Все sensitive данные в `.env` файлах, не в коде
- **API Key Management**: Корпоративные API ключи хранятся на сервере

### Data Protection
- **Transaction Safety**: Операции DELETE с проверкой существования и каскадным удалением
- **Error Details Hiding**: Детали ошибок не возвращаются клиенту (логируются на сервере)

## Database Migrations
- **GRANT права**: При создании новых таблиц ВСЕГДА добавлять GRANT для `service_role`:
  ```sql
  CREATE TABLE public.my_table (id uuid PRIMARY KEY, ...);
  GRANT SELECT, INSERT, UPDATE, DELETE ON public.my_table TO service_role;
  ```

## Plan Mode Requirements
**ВАЖНО**: В режиме плана предоставлять ТОЛЬКО алгоритмы без примеров кода:
- Текстовые описания шагов алгоритма
- Названия таблиц БД и их связи
- Логические схемы в текстовом формате
- Архитектурные решения в виде текста
- Ответы краткие и лаконичные

## Feature-Sliced Design (FSD) Structure

## Feature-Sliced Design (FSD) Structure
```
src/
├── app/          # App-level providers, routing
├── pages/        # Route pages (main pages, admin/, documents/, references/)
├── widgets/      # Complex reusable UI blocks
├── features/     # User interactions, business features (auth/)
├── entities/     # Business entities and their APIs
├── shared/       # Shared utilities, UI components, types (lib/, types/, ui/)
├── layout/       # Layout components
├── lib/          # External library configurations (supabase.ts)
└── components/   # Legacy UI components

## Key Patterns
- **Public API**: Each slice exposes through `index.ts`
- **Imports**: Use path aliases:
  - `@/` → `./src`
  - `@/app/` → `./src/app`
  - `@/pages/` → `./src/pages`
  - `@/widgets/` → `./src/widgets`
  - `@/features/` → `./src/features`
  - `@/entities/` → `./src/entities`
  - `@/shared/` → `./src/shared`
- **State**: TanStack Query for server state, Zustand for auth state only
- **API Files**: Named as `entity-name-api.ts` in `entities/*/api/`
- **Error Handling**: All Supabase queries must include error handling

## File Structure
```
## Cost Calculation Mechanism
- **Функции**: `fetchOpenRouterPricing()` (proxy/src/index.ts) - получает прайс-лист от OpenRouter API, кэширует на 1 час
- **Расчет**: `calculateCost()` (proxy/src/index.ts) - вычисляет стоимость: (promptTokens × input_price) + (completionTokens × output_price)
- **Хранение**: cost сохраняется в `usage_logs` при каждом запросе (оба эндпоинта: `/api/v1/chat` и `/api/v1/chat/stream`)
- **Отображение**: RPC функции возвращают `total_cost` (get_model_usage_stats, get_user_model_usage_stats, get_user_message_history)
- **Ограничение**: Расчет работает только для OpenRouter моделей, для прямых провайдеров возвращает null

## System Prompts Mechanism
- **Таблица**: `prompts` - хранит роли с системными промтами, параметрами и флагом `by_default`
- **Компоненты**:
  - `PromptSelector` (src/features/prompt-selector/index.tsx) - кнопки выбора ролей в чате
  - `usePromptsStore` (src/entities/prompts/model/prompts-store.ts) - Zustand store с localStorage персистентностью
  - `PromptsTab` (src/pages/admin/components/prompts-tab.tsx) - управление ролями на странице админа
- **Логика отправки**:
  - System message добавляется ПЕРВЫМ в массив сообщений (перед историей диалога)
  - Параметры temperature и top_p передаются в requestBody
  - При selectedPrompt === null промт и параметры не отправляются
- **Conversation Title**: Использует последнее пользовательское сообщение (не system message)